import random
import telebot
import time
import sqlite3
from fuzzywuzzy import fuzz
from telebot import types
from tg2 import PLAN, praise, ACTIV, b, f404, PROVODKI
my = 492697956

db = sqlite3.connect('ID.db', check_same_thread=False)
sql = db.cursor()

sql.execute("""CREATE TABLE IF NOT EXISTS id2 (
ID TEXT,
USERS TEXT
)""")
db.commit()

sql.execute("""CREATE TABLE IF NOT EXISTS admins (
AD_ID TEXT, 
USER TEXT
)""")
db.commit()

sql.execute("""CREATE TABLE IF NOT EXISTS wiring (wir TEXT)""")
db.commit()



def rec(message):
    answer = message.text
    for user in sql.execute('SELECT * FROM id2 ORDER BY USERS'):
        try:
            user = user[0]
            user = str(user)
            user = int(user)
            bot.send_message(message.chat.id, user)
            bot.send_message(user, answer)
        except:
            bot.send_message(message.chat.id, '–£ —á–µ–ª–∞ –Ω–æ–≤—ã–π –∞–π–¥–∏')

t = 0
tr = 0
fl = 0
s_t = 0
s_tr = 0
s_fl = 0
b_game = '–ò–≥—Ä–∞ üé≤'
search = '–ü–æ–∏—Å–∫ üîç'

def add_wir(message):
    answer = message.text
    try:
        sql.execute(f"SELECT wir FROM wiring WHERE wir = '{answer}' ")
        if sql.fetchone() is None:
            sql.execute(f"INSERT INTO wiring VALUES (?)", (answer,))
            db.commit()
            bot.send_message(message.chat.id, f'–ü—Ä–æ–≤–æ–¥–∫–∞:\n{answer}\n–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–æ–¥–∫—É!')
    except:
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–æ–¥–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞')

def prov(message, P, proc=75):
    c = 0

    for i in P:
        a = fuzz.partial_ratio(message.text, str(i))
        if int(a) >= proc:
            bot.send_message(message.chat.id, i)
            c += 1
            time.sleep(0.2)
    if c == 0:
        bot.reply_to(message, f404)

def t_prov(message, P, proc = 85):
    c = 0
    for i in P:
        a = fuzz.partial_ratio(message.text, i)
        if int(a) >= proc:
            bot.send_message(message.chat.id, i)
            c += 1
            time.sleep(0.2)
    if c == 0:
        bot.reply_to(message, f404)

def termin(message):
    cr = []
    ab = 0
    tt = open('ter.txt', encoding='utf8')
    for line in tt:
        cr.append(line)
    tt.close()
    t_prov(message, cr, proc=85)
    #–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∞—Ä—Ç "–∏–≥—Ä—ã"

def s_gm(message):
    s_testing()
    global s_r
    s_r = []

    r_random(s_test, s_r)

    s_gmb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    s_gmb.add(
        types.KeyboardButton(s_test[s_r[0]][0]),
        types.KeyboardButton(s_test[s_r[1]][0]),
        types.KeyboardButton(s_test[s_r[2]][0]),
        types.KeyboardButton(s_test[s_r[3]][0]),
        types.KeyboardButton(b)
    )
    global s_rk
    s_rk = random.randint(0, 3)

    bot.send_message(message.chat.id, s_test[s_r[s_rk]][1], reply_markup=s_gmb)
    bot.register_next_step_handler(message, s_game)


def gm(message):
    testing()
    global r
    r = []

    r_random(test, r)

    gmb = types.ReplyKeyboardMarkup(resize_keyboard=False)
    gmb.add(
        types.KeyboardButton(test[r[0]][1]),
        types.KeyboardButton(test[r[1]][1])
    )
    gmb.add(
        types.KeyboardButton(test[r[2]][1]),
        types.KeyboardButton(test[r[3]][1])
    )

    gmb.add(types.KeyboardButton(b))
    global rk
    rk = random.randint(0, 3)

    bot.send_message(message.chat.id, test[r[rk]][0], reply_markup=gmb)

    bot.register_next_step_handler(message, game)
    #–∑–∞–ø—É—Å–∫ —Å—Ç–∞—Ä—Ç–∞


def adm_st2(message):
    adm_b2 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    adm_b2.add(
        types.KeyboardButton('Admins'),
        types.KeyboardButton('Admins.D'),

    )
def adm_st(message):

    adm_botton = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    adm_botton.add(
        types.KeyboardButton('–†–µ–∫–ª–∞–º–∞ üì∫'),
        types.KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë±üèº‚Äç‚ôÇÔ∏è'),
        types.KeyboardButton('Admin.add üôãüèª‚Äç‚ôÇÔ∏è'),
        types.KeyboardButton('–ü—Ä–æ–≤–æ–¥–∫–∏.add ‚úâÔ∏è'),
        types.KeyboardButton(b),
        types.KeyboardButton('Next')
    )

    bot.send_message(message.chat.id, '–í—ã –≤–æ—à–ª–∏ –≤ ADMIN –ø–∞–Ω–µ–ª—å', reply_markup=adm_botton)
def adm_2(message):
    adm_botton = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    adm_botton.add(
        types.KeyboardButton('–†–µ–∫–ª–∞–º–∞ üì∫'),
        types.KeyboardButton('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë±üèº‚Äç‚ôÇÔ∏è'),
        types.KeyboardButton('–ü—Ä–æ–≤–æ–¥–∫–∏.add ‚úâÔ∏è'),
        types.KeyboardButton(b)
    )

    bot.send_message(message.cgat.id, '–í—ã –≤–æ—à–ª–∏ –≤ ADMIN –ø–∞–Ω–µ–ª—å', reply_markup=adm_botton)

def st(message):

    button = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    button.add(
        types.KeyboardButton('–°—á–µ—Ç–∞ üßÆ'),
        types.KeyboardButton('–ü—Ä–æ–≤–æ–¥–∫–∏ üìù'),
        types.KeyboardButton('–¢–µ—Ä–º–∏–Ω—ã üéì'),
        types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è')
    )
    bot.send_message(message.chat.id, '‚èπ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é ', reply_markup=button)
    #—Å–∞–º –ª–∏—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏

#—Å–æ–∑–¥–∞—é –ª–∏—Å—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–æ–¥–∫–∏
def testing():
    for i in PROVODKI:
        a = i.split('\n', 1)
        test.append(a)

test = []
r = []#—Ä–∞–Ω–¥–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç
rk = 0
s_r = []
s_rk = 0

def s_testing():
    for i in PLAN:
        a = i.split(':')
        s_test.append(a)

s_test = []

def r_random(a, r):
    while len(r) < 4:
        x = random.randint(0, len(a) - 1)
        if x not in r:
            r.append(x)

bot = telebot.TeleBot("1716157591:AAFvuQbsG26fFZRTpyzrHJf7ACuSpQ6_Qkg")

@bot.message_handler(commands=['admin'])
def admin(message):
    ida = message.chat.id
    if ida == my:
        adm_st(message)
    else:
        c = 0
        for admins in sql.execute('SELECT AD_ID FROM admins'):
            if admins == str(ida):
                c += 1
                adm_2(message)
            else:
                continue
        if c == 0:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!')

@bot.message_handler(commands=['start'])
def start(message):

    id = message.chat.id
    id = str(id)

    user_name = message.from_user.username
    try:

        sql.execute(f"SELECT ID FROM id2 WHERE ID = '{id}' ")
        if sql.fetchone() is None:
            sql.execute(f"INSERT INTO id2 VALUES (?, ?)", (id, user_name,))
            db.commit()
            bot.send_message(my, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}')
    except:
        bot.send_message(my, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')


    bot.reply_to(message, "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –û–ë–£,  –ø–æ–º–æ–≥—É —á–µ–º —Å–º–æ–≥—É")
    st(message)

def users(message):
    c = 0
    try:
        for user in sql.execute('SELECT * FROM id2 ORDER BY USERS'):
            c += 1
            try:
                bot.send_message(message.chat.id, '@' + user[1])
            except:
                pass

        bot.send_message(message.chat.id, f'–ß–∏—Å–ª–æ —é–∑–µ—Ä–æ–≤: {c}')
    except:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫!')

@bot.message_handler(commands=['top'])
def top(message):
    bot.send_message(message.chat.id, '–†–∞–∑ –≤—ã —É–∂–µ —Å—é–¥–∞ –¥–æ—à–ª–∏')
    bot.send_message(message.chat.id, '''–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –ê—Å–µ–µ–≤ –ê–ª—Ç—ã–Ω–±–µ–∫
–ü—Å–µ–≤–¥–æ–Ω–∏–º: AuF
–ì—Ä—É–ø–ø–∞: –ë—É—Ö 1-19
Instagram: https://www.instagram.com/mr_aseev14/ ''' )
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ —á—É—Ç—å –±–ª—å—à–µ –æ–±–æ –º–Ω–µ)')
    st(message)

@bot.message_handler(commands=['rs'])
def rs(message):
    global t
    global s_t
    global tr
    global s_tr
    global fl
    global s_fl
    t = 0
    s_t = 0
    tr = 0
    s_tr = 0
    fl = 0
    s_fl = 0
    bot.send_message(message.chat.id, '–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±—Ä–æ—Å–∞...')
    a = random.randint(1, 40)
    bot.send_message(message.chat.id, '–°–±—Ä–æ—Å –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–∞ ' + str(a) + '%')
    time.sleep(0.6)
    b = random.randint(40, 80)
    bot.send_message(message.chat.id, '–°–±—Ä–æ—Å –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–∞ ' + str(b) + '%')
    time.sleep(0.9)
    c = random.randint(80, 99)
    bot.send_message(message.chat.id, '–°–±—Ä–æ—Å –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–∞ ' + str(c) + '%')
    time.sleep(1)
    bot.send_message(message.chat.id, '–°–±—Ä–æ—Å –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–∞ 100%!')
    bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ!')
    st(message)

@bot.message_handler(commands=['menu'])
def menu(message):
    st(message)

@bot.message_handler(commands=['lesson'])
def lesson_OBU(message):
    IN_button = types.InlineKeyboardMarkup(row_width=4)
    IN_button.add(
        types.InlineKeyboardButton('–£—Ä–æ–∫ 1', url='https://www.youtube.com/watch?v=j-QYFJJRp9M&ab'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 2', url='https://www.youtube.com/watch?v=YqD30F_5m2Q&ab'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 3', url='https://www.youtube.com/watch?v=DMO7DP31-AU&ab'),

        types.InlineKeyboardButton('–£—Ä–æ–∫ 4', url='https://www.youtube.com/watch?v=oGh_K-aCYTU&ab'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 5',url='https://www.youtube.com/watch?v=CkGMlLv0YTA&ab'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 6', url='https://www.youtube.com/watch?v=6N_C2NhNMPQ'),

        types.InlineKeyboardButton('–£—Ä–æ–∫ 7', url='https://www.youtube.com/watch?v=P7g4T_5364s'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 8', url='https://www.youtube.com/watch?v=fvziqAYwYPE'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 9', url='https://www.youtube.com/watch?v=-oq8UCkAo70'),

        types.InlineKeyboardButton('–£—Ä–æ–∫ 10', url='https://www.youtube.com/watch?v=2ukt4bUQMV4'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 11', url='https://www.youtube.com/watch?v=RJ8kTaGOIb8'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 12', url='https://www.youtube.com/watch?v=xZ_2VpaHi-A'),

        types.InlineKeyboardButton('–£—Ä–æ–∫ 13', url='https://www.youtube.com/watch?v=mXTS0VNJL4k'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 14', url='https://www.youtube.com/watch?v=jGjr2mCslQU'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 15', url='https://www.youtube.com/watch?v=SFagibuUVkk'),

        types.InlineKeyboardButton('–£—Ä–æ–∫ 16', url='https://www.youtube.com/watch?v=POtC4zyruu0'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 17', url='https://www.youtube.com/watch?v=H3Ofc9B0R_I'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 18', url='https://www.youtube.com/watch?v=Sq5-xylAOno'),

        types.InlineKeyboardButton('–£—Ä–æ–∫ 19', url='https://www.youtube.com/watch?v=XhVMlcAr8Yo'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 20', url='https://www.youtube.com/watch?v=wFRcifSCUJo'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 21', url='https://www.youtube.com/watch?v=qWreUpqzZp0'),

        types.InlineKeyboardButton('–£—Ä–æ–∫ 22', url='https://www.youtube.com/watch?v=9e7A3qBqT1k'),
        types.InlineKeyboardButton('–£—Ä–æ–∫ 23', url='https://www.youtube.com/watch?v=stNJYqVALQc')
    )

    bot.send_message(message.chat.id, '–£—Ä–æ–∫–∏ –ø–æ –û–ë–£:', reply_markup=IN_button)
    st(message)

def lesson_POBUA(message):
    in_button = types.InlineKeyboardMarkup()
    in_button.add(
        types.InlineKeyboardButton('–£—Ä–æ–∫ 1', url='https://www.youtube.com/watch?v=XyOy3ypgBo4&t=9s')
    )
    in_button.add(
        types.InlineKeyboardButton('–û–ë–£', callback_data='OBU')
    )
    bot.send_message(message.chat.id, '–£—Ä–æ–∫–∏ –ø–æ –ü–û–ë–£–ê', reply_markup=in_button)

@bot.message_handler(content_types=['text', "photo"])
def check(message):
    id_u = message.chat.id

    if message.text == '–†–µ–∫–ª–∞–º–∞ üì∫':
        sql.execute(f"SELECT AD_ID FROM admins WHERE AD_ID = '{id_u}' ")
        if id_u == my:
            bot.send_message(my, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É')
            bot.register_next_step_handler(message, reclaim)

        elif sql.fetchone() is None:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ")
            st(message)
        elif id_u == my:
            bot.send_message(my, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É')
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É')
            bot.register_next_step_handler(message, reclaim)

    elif message.text == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ üë±üèº‚Äç‚ôÇÔ∏è':
        sql.execute(f"SELECT AD_ID FROM admins WHERE AD_ID = '{id_u}' ")
        if id_u == my:
            users(message)
            adm_st(message)
        elif sql.fetchone() is None:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ")
            st(message)
        else:
            users(message)
            adm_2(message)
    elif message.text == '–ü—Ä–æ–≤–æ–¥–∫–∏.add ‚úâÔ∏è':
        sql.execute(f"SELECT AD_ID FROM admins WHERE AD_ID = '{id_u}'")
        if id_u == my:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!')
            bot.register_next_step_handler(message, add_wiring)





    elif message.text == '–°—á–µ—Ç–∞ üßÆ':
        s_button = types.ReplyKeyboardMarkup(resize_keyboard=True)
        s_button.add(
            types.KeyboardButton(search),
            types.KeyboardButton(b_game),
            types.KeyboardButton('–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º üßæ'),
            types.KeyboardButton(b)
        )
        bot.send_message(message.chat.id, '–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å—á–µ—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è ?\n–†–µ—à–∞–π—Å—è:', reply_markup=s_button)
        bot.register_next_step_handler(message, score)

    elif message.text == '–ü—Ä–æ–≤–æ–¥–∫–∏ üìù':
        w_button = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        w_button.add(
            types.KeyboardButton(search),
            types.KeyboardButton(b_game),
            types.KeyboardButton(b)
        )
        bot.send_message(message.chat.id, '–¢—ã —Ç—É—Ç –Ω–∞–π–¥–µ—à—å –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–æ–¥–∫–∏, –∏–ª–∏ –∂–µ —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–æ–∫.', reply_markup=w_button)

        bot.register_next_step_handler(message, wiring)

    elif message.text == '–¢–µ—Ä–º–∏–Ω—ã üéì':
        t_button = types.ReplyKeyboardMarkup(resize_keyboard=True)
        t_button.add(types.KeyboardButton(b))
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω', reply_markup=t_button)
        bot.register_next_step_handler(message, termins)

    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è':
        i_button = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        i_button.add(
            types.KeyboardButton('–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üë®üèª‚Äçüíª'),
            types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è'),
            types.KeyboardButton(b)
        )
        bot.send_message(message.chat.id, '''–¢—É—Ç –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –ò–Ω—Ñ–∞, –Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –º–æ–∂–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π.
–ü–æ—Ç—ã–∫–∞–π –Ω–∞ –≤—Å—ë –ø–æ–¥—Ä—è–¥ üôÉ''', reply_markup=i_button)
        bot.register_next_step_handler(message, information)

#–±–ª–æ–∫ (–°—á–µ—Ç–∞)
def score(message):
    if message.text == b:
        st(message)
    elif message.text == search:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞:')
        bot.register_next_step_handler(message, scores)
    elif message.text == '–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º üßæ':
        bot.send_message(message.chat.id, ACTIV)
        bot.register_next_step_handler(message, score)
    elif message.text == b_game:
        s_gm(message)
def scores(message):
    if message.text == b:
        st(message)
    elif message.text == search:
        bot.reply_to(message, '–í—ã —É–∂–µ –∏—â–∏—Ç–µ, –Ω–µ –Ω–∞–¥–æ —Å–ø–∞–º–∏—Ç—å üò°')
        bot.register_next_step_handler(message, scores)
    elif message.text == '–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º üßæ':
        bot.send_message(message.chat.id, ACTIV)
        bot.register_next_step_handler(message, scores)
    elif message.text == b_game:
        s_gm(message)
    else:
        prov(message, sql.execute("SELECT pll FROM plan"), proc=90)
        bot.register_next_step_handler(message, scores)
def s_game(message):
    if message.text != b:
        try:
            global s_t
            s_t += 1
            if message.text == s_test[s_r[s_rk]][0]:
                global s_tr
                s_tr += 1
                bot.send_message(message.chat.id, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ\n' + praise[random.randint(0, len(praise) - 1)] + '\n–°–ª–µ–¥—É—é—â–∏–π —Å—á–µ—Ç:')
                time.sleep(0.1)
                s_gm(message)
            elif message.text == b:
                st(message)

            else:
                global s_fl
                s_fl += 1
                bot.send_message(message.chat.id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! \n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ:\n\n' + s_test[s_r[s_rk]][0] + '\n\n–°–ª–µ–¥—É—é—â–∏–π —Å—á–µ—Ç:')
                time.sleep(0.1)
                s_gm(message)
        except:
            bot.send_message(message.chat.id, '–£–ø—Å —á—Ç–æ - —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –∏ —Å–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±—É!')
    elif message.text == b:
        s_button = types.ReplyKeyboardMarkup(resize_keyboard=True)
        s_button.add(
            types.KeyboardButton(search),
            types.KeyboardButton(b_game),
            types.KeyboardButton('–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º üßæ'),
            types.KeyboardButton(b)
        )
        try:
            accuracy = ((s_tr/s_t)*100)
            accuracy = round(accuracy, 1)
        except:
            accuracy = 0
        bot.send_message(message.chat.id, f'‚ö†Ô∏è–ü–æ–ø—ã—Ç–æ–∫: {s_t}\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {s_tr}\n\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {s_fl}\n\nüéØ –¢\
–æ—á–Ω–æ—Å—Ç—å: {accuracy}%')

        bot.send_message(message.chat.id, '–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å—á–µ—Ç –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è ?\n–†–µ—à–∞–π—Å—è:', reply_markup=s_button)
        bot.register_next_step_handler(message, score)

# –æ–¥–∏–Ω –±–ª–æ–∫ (–ü—Ä–æ–≤–æ–¥–æ–∫)
def wiring(message):

    if message.text == search:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∫—É')
        bot.register_next_step_handler(message, wirings)
    elif message.text == b_game:
        gm(message)
    elif message.text == b:
        st(message)
def wirings(message):
    if message.text == b_game:
        gm(message)
    elif message.text == b:
        st(message)
    elif message.text == search:
        bot.reply_to(message, '–í—ã —É–∂–µ –∏—â–∏—Ç–µ, –Ω–µ –Ω–∞–¥–æ —Å–ø–∞–º–∏—Ç—å üò°')
        bot.register_next_step_handler(message, wirings)
    else:
        prov(message, sql.execute("SELECT wir FROM wiring"))
        bot.register_next_step_handler(message, wirings)
def game(message):
    if message.text != b:
        try:
            global t
            t += 1
            if message.text == test[r[rk]][1]:
                global tr
                tr += 1
                bot.send_message(message.chat.id, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ\n' + praise[random.randint(0, len(praise) - 1)] + '\n–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞:')
                time.sleep(0.1)
                gm(message)
            else:
                global fl
                fl += 1
                bot.send_message(message.chat.id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! \n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ–µ:\n' + test[r[rk]][1] + '\n\n–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–æ–¥–∫–∞:')
                time.sleep(0.1)
                gm(message)
        except:
            bot.send_message(message.chat.id, '–£–ø—Å —á—Ç–æ - —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –∏ —Å–∫–∞–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±—É!')
    elif message.text == b:
        w_button = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        w_button.add(
            types.KeyboardButton(search),
            types.KeyboardButton(b_game),
            types.KeyboardButton(b)
        )
        try:
            accuracy = (tr/t)*100
            accuracy = round(accuracy, 1)
        except:
            accuracy = 0
        bot.send_message(message.chat.id, f'‚ö†Ô∏è–ü–æ–ø—ã—Ç–æ–∫: {t}\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {tr}\n\n‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {fl}\n\nüéØ –¢\
–æ—á–Ω–æ—Å—Ç—å: {accuracy}%')
        bot.send_message(message.chat.id, '–¢—ã —Ç—É—Ç –Ω–∞–π–¥–µ—à—å –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–æ–≤–æ–¥–∫–∏, –∏–ª–∏ –∂–µ —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –Ω–∞ —Å–æ—Å\
—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–æ–¥–æ–∫.', reply_markup=w_button)

        bot.register_next_step_handler(message, wiring)

#–±–ª–æ–∫ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
def information(message):
    if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚ÑπÔ∏è':
        bot.send_message(message.chat.id, '''–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–º—É —É—á–µ—Ç—É.
–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–æ–¥–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å—É.

–Ø –ª–∏—à—å —Ç–∞–∫–æ–π –∂–µ —Å—Ç—É–¥–µ–Ω—Ç, –∫–∞–∫ –∏ –≤—ã. –ü—ã—Ç–∞—è—Å—å –æ–±–ª–µ–≥—á–∏—Ç—å —Å–≤–æ—é —É—á–µ–±—É –ø—Ä–∏—à–ª–∞ –º—ã—Å–ª—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –Ω–µ —Å—É–¥–∏–º —Å—Ç—Ä\
–æ–≥–æ. –ù—É –≤–æ—Ç –∏ —è —Ä–µ—à–∏–ª –ø–æ–¥–µ–ª–∏—Ç—Å—è –∏–º —Å –≤–∞–º–∏.  –û–Ω –Ω–µ –∏–¥–µ–∞–ª–µ–Ω –∏ –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—à—É —É –≤–∞—Å –ø–æ–º–æ—â–∏ –¥–æ–≤–µ—Å—Ç–∏ –µ–≥–æ –¥–æ –∏–¥–µ–∞–ª–∞.
–ö—Å—Ç–∞—Ç–∏ –∫–æ–º–º–∞–Ω–¥—ã –ª—É—á—à–µ –≤—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –∞ —Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–≥–æ —Ç—É–ø–∏—Ç—å.
–¢–∞–∫ –∂–µ —è —á–∞—Å—Ç–æ –±—É–¥—É –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –∏ –Ω–æ–≤—ã—Ö —Ñ–∏—à–µ–∫. –ê —Å –∫–∞–∂–¥—ã–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –Ω–∞–¥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º\
–º–∞–Ω–¥—É : /start. –ù—É –≤—ã –º–µ–Ω—è —É—Å–ª—ã—à–∞–ª–∏üôÉ
–ò –¥–ª—è —Ç–µ—Ö –∫—Ç–æ —ç—Ç–æ —á–∏—Ç–∞–µ—Ç, "—Å–µ–∫—Ä–µ—Ç–Ω–∞—è" –∫–æ–º–º–∞–Ω–¥–∞: /top''')
        bot.register_next_step_handler(message, information)
    elif message.text == '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å üë®üèª‚Äçüíª':
        bc_button = types.InlineKeyboardMarkup()
        bc_button.add(types.InlineKeyboardButton('AuF', url='https://t.me/AuF22'))
        bot.send_message(message.chat.id, '–í–∞—à–∏ –∏–¥–µ–∏, –º—ã—Å–ª–∏, –ø–æ–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≤–æ–¥–æ–∫, –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ–≤–æ–¥–∫–∏ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –º–æ–∂\
–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üîΩ', reply_markup=bc_button)
        bot.register_next_step_handler(message, information)

    elif message.text == b:
        st(message)


    elif message.text == b:
        st(message)

#–±–ª–æ–∫ –¢–µ—Ä–º–∏–Ω—ã
def termins(message):

    if message.text == b:
        st(message)
    else:
        termin(message)
        bot.register_next_step_handler(message, termins)

def reclaim(message):
    id = message.chat.id
    rec(message)
    if id == my:
        adm_st(message)
    else:
        adm_2(message)

def add_wiring(message):
    id_u = message.chat.id
    if message.text == b:
        if id_u == my:
            adm_st(message)
        else:
            adm_2(message)
    else:
        add_wir(message)
        bot.register_next_step_handler(message, add_wiring)



bot.polling(none_stop=True, interval=0 )
