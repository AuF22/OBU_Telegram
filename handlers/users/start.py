from loader import dp
from aiogram import types
from keyboards.default.start_kb import start_kb
from keyboards.inline.knowledge import ikb_game
from fuzzywuzzy import fuzz
from time import sleep


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer(text='–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –û–ë–£,  –ø–æ–º–æ–≥—É —á–µ–º —Å–º–æ–≥—É', reply_markup=start_kb)


@dp.message_handler(text='üéì–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π')
async def chart(message: types.Message):
    await message.answer(text='–ù–∞—Å–∫–æ–ª—å–∫–æ –∂–µ —Ç—ã —É–≤–µ—Ä–µ–Ω(–∞) –≤ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö ?!', reply_markup=ikb_game)


@dp.message_handler(content_types=['text'])
async def look_for_accounting_entries(message: types.Message):
    from Data.data import accounting_entries
    answers = []
    for account_entry in accounting_entries:
        coincidence = fuzz.partial_ratio(message.text, str(account_entry))
        if coincidence >= 75:
            answers.append(account_entry)
        else:
            continue

    if len(answers) == 0:
        text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã —Ç–∞–∫–æ–π –ø—Ä–æ–≤–æ–¥–∫–∏ –Ω–µ –Ω–∞—à–ª–∏:\n{message.text}"
        await message.answer(text=text)
    else:
        await message.answer(text=f'–ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ {len(answers)} –ø—Ä–æ–≤–æ–¥–æ–∫')
        for answer in answers:
            await message.answer(text=answer)
            sleep(0.2)
        await message.answer('–≠—Ç–æ –±—ã–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–æ–¥–∫–∏')
